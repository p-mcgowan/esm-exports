{"version":3,"sources":["..\\src\\directory.ts"],"names":[],"mappings":"AAAA,YAAY;AACZ,IAAI,KAAK,EAAE,OAAO,CAAC,MAAM,CAAC;AAC1B,IAAI,GAAG,EAAE,OAAO,CAAC,IAAI,CAAC;AACtB,IAAI,SAAS,EAAE,OAAO,CAAC,QAAQ,CAAC;AAChC,IAAI,SAAS,EAAE,OAAO,CAAC,qBAAqB,CAAC;AAC7C,IAAI,UAAU,EAAE,OAAO,CAAC,mBAAmB,CAAC;AAC5C,IAAI,QAAQ,EAAE,OAAO,CAAC,SAAS,CAAC;AAChC,SAAS,SAAS,CAAC,MAAM,EAAE;IACvB,IAAI,QAAQ,EAAE,MAAM;IACpB,OAAO,IAAI,OAAO,CAAC,SAAS,CAAC,OAAO,EAAE,MAAM,EAAE;QAC1C,IAAI,MAAM,EAAE,SAAS,CAAC,MAAM,EAAE,CAAC,MAAM,CAAC,EAAE,SAAS,CAAC,GAAG,EAAE,KAAK,EAAE;YAC1D,GAAG,CAAC,GAAG;gBACH,OAAO,MAAM,CAAC,GAAG,CAAC;YACtB,OAAO,CAAC,KAAK,CAAC;QAClB,CAAC,CAAC;IACN,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE;QACrB,OAAO,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,EAAE;YACzC,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC;YACnC,KAAK,EAAE,OAAO,CAAC,IAAI,CAAC;YACpB,OAAO,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;QACrD,CAAC,CAAC;YACE,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE;YACxB,OAAO,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC;QACnC,CAAC,CAAC;IACN,CAAC,CAAC;AACN;AACA,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,YAAY,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;AAC7D,OAAO,CAAC,QAAQ,EAAE,SAAS;AAC3B,SAAS,MAAM,CAAC,IAAI,EAAE,KAAK,EAAE;IACzB,GAAG,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QACnB,OAAO,KAAK;IAChB,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC;QAC5C,OAAO,KAAK;IAChB,OAAO,IAAI;AACf","file":"directory.ts","sourcesContent":["/// <reference path=\"../node_modules/typescript/lib/lib.es6.d.ts\" />\nimport * as fs from \"fs\";\nimport * as path from \"path\";\nimport {node} from \"./\";\nimport {flatten, endsWith} from \"lodash\";\nimport {readFileResult} from \"./types/readfile-result\";\nconst readFile: readFileResult = require(\"fs-readfile-promise\");\nconst recursive = require(\"recursive-readdir\");\nconst unixify = require(\"unixify\");\n\nexport default function directory(target: string) {\n    var baseDir = target;\n    return new Promise<any[]>((resolve, reject) => {\n        var files: string[] = recursive(target, [ignore], (err, files) => {\n            if (err) return reject(err);\n            resolve(files);\n        });\n    }).then(files => {\n        return Promise.all(\n            files.map(file => {\n                file = path.relative(baseDir, file);\n                file = unixify(file);\n                return node(`./${file}`, { baseDir });\n            }))\n            .then(result => {\n                return flatten<any>(result);\n            });\n    })\n}\n\nfunction ignore(file, stats) {\n    if (stats.isDirectory()) return false;\n    if (endsWith(path.extname(file), \".ts\")) return false;\n    return true;\n}"]}