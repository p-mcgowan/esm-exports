{"version":3,"file":"directory.js","sourceRoot":"","sources":["..\\directory.ts"],"names":[],"mappings":";AAEA,IAAY,IAAI,WAAM,MAAM,CAAC,CAAA;AAC7B,iBAAmB,IAAI,CAAC,CAAA;AACxB,uBAAgC,QAAQ,CAAC,CAAA;AAEzC,IAAM,QAAQ,GAAmB,OAAO,CAAC,qBAAqB,CAAC,CAAC;AAChE,IAAM,SAAS,GAAG,OAAO,CAAC,mBAAmB,CAAC,CAAC;AAC/C,IAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AAEnC,mBAAkC,MAAc;IAC5C,IAAI,OAAO,GAAG,MAAM,CAAC;IACrB,MAAM,CAAC,IAAI,OAAO,CAAQ,UAAC,OAAO,EAAE,MAAM;QACtC,IAAI,KAAK,GAAa,SAAS,CAAC,MAAM,EAAE,CAAC,MAAM,CAAC,EAAE,UAAC,GAAG,EAAE,KAAK;YACzD,EAAE,CAAC,CAAC,GAAG,CAAC;gBAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC5B,OAAO,CAAC,KAAK,CAAC,CAAC;QACnB,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC,IAAI,CAAC,UAAA,KAAK;QACT,MAAM,CAAC,OAAO,CAAC,GAAG,CACd,KAAK,CAAC,GAAG,CAAC,UAAA,IAAI;YACV,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;YACpC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;YACrB,MAAM,CAAC,OAAI,CAAC,OAAK,IAAM,EAAE,EAAE,SAAA,OAAO,EAAE,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;aACF,IAAI,CAAC,UAAA,MAAM;YACR,MAAM,CAAC,gBAAO,CAAM,MAAM,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;IACX,CAAC,CAAC,CAAA;AACN,CAAC;AAlBD;2BAkBC,CAAA;AAED,gBAAgB,IAAI,EAAE,KAAK;IACvB,EAAE,CAAC,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC;QAAC,MAAM,CAAC,KAAK,CAAC;IACtC,EAAE,CAAC,CAAC,iBAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,CAAC;QAAC,MAAM,CAAC,KAAK,CAAC;IACtD,MAAM,CAAC,IAAI,CAAC;AAChB,CAAC","sourcesContent":["/// <reference path=\"../node_modules/typescript/lib/lib.es6.d.ts\" />\nimport * as fs from \"fs\";\nimport * as path from \"path\";\nimport {node} from \"./\";\nimport {flatten, endsWith} from \"lodash\";\nimport {readFileResult} from \"./types/readfile-result\";\nconst readFile: readFileResult = require(\"fs-readfile-promise\");\nconst recursive = require(\"recursive-readdir\");\nconst unixify = require(\"unixify\");\n\nexport default function directory(target: string) {\n    var baseDir = target;\n    return new Promise<any[]>((resolve, reject) => {\n        var files: string[] = recursive(target, [ignore], (err, files) => {\n            if (err) return reject(err);\n            resolve(files);\n        });\n    }).then(files => {\n        return Promise.all(\n            files.map(file => {\n                file = path.relative(baseDir, file);\n                file = unixify(file);\n                return node(`./${file}`, { baseDir });\n            }))\n            .then(result => {\n                return flatten<any>(result);\n            });\n    })\n}\n\nfunction ignore(file, stats) {\n    if (stats.isDirectory()) return false;\n    if (endsWith(path.extname(file), \".ts\")) return false;\n    return true;\n}"]}