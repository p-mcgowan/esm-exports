{"version":3,"sources":["..\\src\\parse.ts"],"names":[],"mappings":"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","file":"parse.ts","sourcesContent":["/// <reference path=\"../node_modules/typescript/lib/lib.es6.d.ts\" />\nimport * as ts from \"typescript\";\nimport * as path from \"path\";\nimport {find, flatten, get} from \"lodash\";\nimport {node} from \"./\";\nconst isRelative = require(\"is-relative-path\");\nconst unixify = require(\"unixify\");\n\nexport default function parse(sourceText: string, options: any = {}) {\n    var entryList: Array<any> = [];\n    var sourceFile = ts.createSourceFile(\"dummy.ts\", sourceText, ts.ScriptTarget.ES6, false);\n    var {dirname, module, file} = options;\n    if (module) {\n        module = unixify(module);\n    }\n    sourceFile.statements.forEach((statement: any) => {\n        if (statement.kind === ts.SyntaxKind.ExportDeclaration) {\n            var specifier: string = get(statement, \"moduleSpecifier.text\", null);\n            var exportAll = !(statement.exportClause && statement.exportClause.elements);\n            if (exportAll) {\n                var names = [null];\n            }\n            if (statement.exportClause) {\n                names = statement.exportClause.elements.map(n => n.name.text);\n            }\n            names.forEach(name => entryList.push({ name, module, specifier, exportAll, dirname }));\n        } else if (find<ts.Node>(statement.modifiers, m => m.kind === ts.SyntaxKind.ExportKeyword)) {\n            // TODO: Combine ifs later.\n            if (statement.declarationList) {\n                statement.declarationList.declarations.forEach(d => {\n                    var name = d.name.text;\n                    entryList.push({ name, module });\n                });\n            } else if (statement.name) {\n                var name = statement.name.text;\n                var {specifier: string, baseDir} = options;\n                if (specifier && isRelative(specifier)) {\n                    var relative: string = unixify(path.relative(baseDir, file));\n                    // TODO: strip ts or dts extension\n                    var exact = `${module}/${relative.slice(0, -(\".d.ts\".length))}`;\n                }\n                entryList.push({ name, module, relative, exact, specifier});\n            }\n        }\n    });\n    return Promise.all(entryList.map(item => {\n        if (!item.exportAll) {\n            return item;\n        }\n        return node(item.specifier, { baseDir: dirname, parent: module, specifier: item.specifier });\n    }))\n        .then(result => {\n            return flatten<any>(result);\n        });\n}"]}