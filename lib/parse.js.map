{"version":3,"file":"parse.js","sourceRoot":"","sources":["..\\parse.ts"],"names":[],"mappings":"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","sourcesContent":["/// <reference path=\"../node_modules/typescript/lib/lib.es6.d.ts\" />\nimport * as ts from \"typescript\";\nimport * as path from \"path\";\nimport {find, flatten, get} from \"lodash\";\nimport main from \"./main\";\nconst isRelative = require(\"is-relative-path\");\nconst unixify = require(\"unixify\");\n\nexport default function parse(sourceText: string, options: any = {}) {\n    var entryList: Array<any> = [];\n    var sourceFile = ts.createSourceFile(\"dummy.ts\", sourceText, ts.ScriptTarget.ES6, false);\n    var {dirname, module, file} = options;\n    if (module) {\n        module = unixify(module);\n    }\n    sourceFile.statements.forEach((node: any) => {\n        if (node.kind === ts.SyntaxKind.ExportDeclaration) {\n            var specifier: string = get(node, \"moduleSpecifier.text\", null);\n            var exportAll = !(node.exportClause && node.exportClause.elements);\n            if (exportAll) {\n                var names = [null];\n            }\n            if (node.exportClause) {\n                names = node.exportClause.elements.map(n => n.name.text);\n            }\n            names.forEach(name => entryList.push({ name, module, specifier, exportAll, dirname }));\n        } else if (find<ts.Node>(node.modifiers, m => m.kind === ts.SyntaxKind.ExportKeyword)) {\n            // TODO: Combine ifs later.\n            if (node.declarationList) {\n                node.declarationList.declarations.forEach(d => {\n                    var name = d.name.text;\n                    entryList.push({ name, module });\n                });\n            } else if (node.name) {\n                var name = node.name.text;\n                var {specifier: string, baseDir} = options;\n                if (specifier && isRelative(specifier)) {\n                    var relative: string = unixify(path.relative(baseDir, file));\n                    // TODO: strip ts or dts extension\n                    var exact = `${module}/${relative.slice(0, -(\".d.ts\".length))}`;\n                }\n                entryList.push({ name, module, relative, exact, specifier});\n            }\n        }\n    });\n    return Promise.all(entryList.map(item => {\n        if (!item.exportAll) {\n            return item;\n        }\n        return main(item.specifier, { baseDir: dirname, parent: module, specifier: item.specifier });\n    }))\n        .then(result => {\n            return flatten<any>(result);\n        });\n}"]}