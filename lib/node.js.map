{"version":3,"sources":["..\\src\\node.ts"],"names":[],"mappings":"AAAA,YAAY;;AAEZ,IAAI,KAAK,EAAE,OAAO,CAAC,MAAM,CAAC;AAC1B,IAAI,GAAG,EAAE,OAAO,CAAC,IAAI,CAAC;AACtB,IAAI,QAAQ,EAAE,OAAO,CAAC,SAAS,CAAC;AAChC,IAAI,SAAS,EAAE,OAAO,CAAC,QAAQ,CAAC;AAChC,IAAI,WAAW,EAAE,OAAO,CAAC,aAAa,CAAC;AACvC,IAAI,SAAS,EAAE,OAAO,CAAC,qBAAqB,CAAC;AAC7C,IAAI,QAAQ,EAAE,OAAO,CAAC,SAAS,CAAC;AAChC,IAAI,WAAW,EAAE,OAAO,CAAC,kBAAkB,CAAC;AAC5C,IAAI,SAAS,EAAE;IACX,OAAO,EAAE;AACb,CAAC;AACD,SAAS,IAAI,CAAC,UAAU,EAAE,OAAO,EAAE;IAC/B,GAAG,CAAC,QAAQ,IAAI,KAAK,CAAC,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE;IAC9C,IAAI,IAAI;IACR,IAAI,QAAQ,EAAE,OAAO,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,MAAM;IACtD,IAAI,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,UAAU;IACzC,GAAG,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE;QACxB,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,EAAE,KAAK,CAAC,EAAE;YACtC,WAAW,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACxC;QACA,IAAI,gBAAgB,EAAE,CAAC,KAAK,EAAE,OAAO,CAAC;QACtC,IAAI,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,eAAe,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YAC7C,IAAI,QAAQ,EAAE,WAAW,EAAE,eAAe,CAAC,CAAC,CAAC;YAC7C,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC;YACrC,GAAG,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;gBACrB,KAAK;YACT;QACJ;IACJ;IACA,KAAK;QACD,IAAI,WAAW,EAAE,UAAU,CAAC,UAAU,EAAE,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAC;QACzD,IAAI,YAAY,EAAE,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,cAAc,CAAC;QACvD,IAAI,QAAQ,EAAE,OAAO,CAAC,WAAW,CAAC,CAAC,OAAO;QAC1C,GAAG,CAAC,CAAC,OAAO,EAAE;YACV,OAAO,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAC9B;QACA,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,OAAO,CAAC;IACzC;IACA,IAAI,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;IAChC,QAAQ,EAAE,OAAO,CAAC,OAAO,CAAC;IAC1B,OAAO,QAAQ,CAAC,IAAI,EAAE,MAAM;QACxB,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE;QAC5B,IAAI,EAAE,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,OAAO,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;QACpF,OAAO,OAAO,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC,CAAC;IACzC,CAAC,CAAC;AACN;AACA,OAAO,CAAC,KAAK,EAAE,IAAI","file":"node.ts","sourcesContent":["/// <reference path=\"../node_modules/typescript/lib/lib.es6.d.ts\" />\nimport * as path from \"path\";\nimport * as fs from \"fs\";\nimport parse from \"./parse\";\nimport {get, endsWith} from \"lodash\";\nimport {readFileResult} from \"./types/readfile-result\";\nconst resolvePkg = require(\"resolve-pkg\");\nconst readFile: readFileResult = require(\"fs-readfile-promise\");\nconst unixify = require(\"unixify\");\nconst isRelative = require(\"is-relative-path\");\n\nconst defaults = {\n    baseDir: \".\"\n};\n\nexport function node(nameOrFile: string, options: { [k: string]: any } = defaults): Promise<Array<any>> {\n    var file: string;\n    var {baseDir, parent} = options;\n    var module: string = parent ? parent : nameOrFile;\n    if (isRelative(nameOrFile)) {\n        if (endsWith(nameOrFile, \".ts\")) {\n            nameOrFile = nameOrFile.slice(0, -3);\n        }\n        var checkExtensions = [\".ts\", \".d.ts\"];\n        for (var i = 0; i < checkExtensions.length; ++i) {\n            var extFile = nameOrFile + checkExtensions[i];\n            file = path.resolve(baseDir, extFile);\n            if (fs.existsSync(file)) {\n                break;\n            }\n        }\n    } else {\n        var packageDir = resolvePkg(nameOrFile, { cwd: baseDir });\n        var packageFile = path.join(packageDir, \"package.json\");\n        var {typings} = require(packageFile);\n        if (!typings) {\n            return Promise.resolve([]);\n        }\n        file = path.join(packageDir, typings);\n    }\n    var dirname = path.dirname(file);\n    dirname = unixify(dirname);\n    return readFile(file, \"utf8\")\n        .then((sourceText: string) => {\n            var o = Object.assign({}, options, { module, file, dirname });\n            return parse(sourceText, o);\n        });\n}"]}