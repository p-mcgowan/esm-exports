{"version":3,"file":"node.js","sourceRoot":"","sources":["..\\node.ts"],"names":[],"mappings":";AAAA,oEAAoE;AACpE,IAAY,IAAI,WAAM,MAAM,CAAC,CAAA;AAC7B,IAAY,EAAE,WAAM,IAAI,CAAC,CAAA;AACzB,sBAAoB,SAAS,CAAC,CAAA;AAC9B,uBAA4B,QAAQ,CAAC,CAAA;AAErC,IAAM,UAAU,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AAC1C,IAAM,QAAQ,GAAmB,OAAO,CAAC,qBAAqB,CAAC,CAAC;AAChE,IAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AACnC,IAAM,UAAU,GAAG,OAAO,CAAC,kBAAkB,CAAC,CAAC;AAE/C,IAAM,QAAQ,GAAG;IACb,OAAO,EAAE,GAAG;CACf,CAAC;AAEF,cAAqB,UAAkB,EAAE,OAAwC;IAAxC,uBAAwC,GAAxC,kBAAwC;IAC7E,IAAI,IAAY,CAAC;IACZ,6BAAO,EAAE,uBAAM,CAAY;IAChC,IAAI,MAAM,GAAW,MAAM,GAAG,MAAM,GAAG,UAAU,CAAC;IAClD,EAAE,CAAC,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QACzB,EAAE,CAAC,CAAC,iBAAQ,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;YAC9B,UAAU,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACzC,CAAC;QACD,IAAI,eAAe,GAAG,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QACvC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE,CAAC;YAC9C,IAAI,OAAO,GAAG,UAAU,GAAG,eAAe,CAAC,CAAC,CAAC,CAAC;YAC9C,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YACtC,EAAE,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACtB,KAAK,CAAC;YACV,CAAC;QACL,CAAC;IACL,CAAC;IAAC,IAAI,CAAC,CAAC;QACJ,IAAI,UAAU,GAAG,UAAU,CAAC,UAAU,EAAE,EAAE,GAAG,EAAE,OAAO,EAAE,CAAC,CAAC;QAC1D,IAAI,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC;QACnD,0CAAO,CAAyB;QACrC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACX,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAC/B,CAAC;QACD,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;IAC1C,CAAC;IACD,IAAI,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IACjC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;IAC3B,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,MAAM,CAAC;SACxB,IAAI,CAAC,UAAC,UAAkB;QACrB,IAAI,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,OAAO,EAAE,EAAE,QAAA,MAAM,EAAE,MAAA,IAAI,EAAE,SAAA,OAAO,EAAE,CAAC,CAAC;QAC9D,MAAM,CAAC,aAAK,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;IAChC,CAAC,CAAC,CAAC;AACX,CAAC;AAhCe,YAAI,OAgCnB,CAAA","sourcesContent":["/// <reference path=\"../node_modules/typescript/lib/lib.es6.d.ts\" />\nimport * as path from \"path\";\nimport * as fs from \"fs\";\nimport {parse} from \"./parse\";\nimport {get, endsWith} from \"lodash\";\nimport {readFileResult} from \"./types/readfile-result\";\nconst resolvePkg = require(\"resolve-pkg\");\nconst readFile: readFileResult = require(\"fs-readfile-promise\");\nconst unixify = require(\"unixify\");\nconst isRelative = require(\"is-relative-path\");\n\nconst defaults = {\n    baseDir: \".\"\n};\n\nexport function node(nameOrFile: string, options: { [k: string]: any } = defaults): Promise<Array<any>> {\n    var file: string;\n    var {baseDir, parent} = options;\n    var module: string = parent ? parent : nameOrFile;\n    if (isRelative(nameOrFile)) {\n        if (endsWith(nameOrFile, \".ts\")) {\n            nameOrFile = nameOrFile.slice(0, -3);\n        }\n        var checkExtensions = [\".ts\", \".d.ts\"];\n        for (var i = 0; i < checkExtensions.length; ++i) {\n            var extFile = nameOrFile + checkExtensions[i];\n            file = path.resolve(baseDir, extFile);\n            if (fs.existsSync(file)) {\n                break;\n            }\n        }\n    } else {\n        var packageDir = resolvePkg(nameOrFile, { cwd: baseDir });\n        var packageFile = path.join(packageDir, \"package.json\");\n        var {typings} = require(packageFile);\n        if (!typings) {\n            return Promise.resolve([]);\n        }\n        file = path.join(packageDir, typings);\n    }\n    var dirname = path.dirname(file);\n    dirname = unixify(dirname);\n    return readFile(file, \"utf8\")\n        .then((sourceText: string) => {\n            var o = Object.assign({}, options, { module, file, dirname });\n            return parse(sourceText, o);\n        });\n}"]}